openapi: 3.0.0
info:
  title: Perun Proxy API
  description: Perun Proxy API
  version: 0.3.0-dev
servers:
  - url: 'https://perun.cesnet.cz/rest/v1'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Attributes:
      type: object
      additionalProperties:
        anyOf:
          - type: string
            example: "value"
          - type: integer
            example: 25
          - type: boolean
            example: true
          - type: array
            example: ["value1", "value2"]
          - type: object
      example:
        "urn:attribute:name:1": 12354
        "urn:attribute:name:2": "value2"
        "urn:attribute:name:3": ["value1", "array2"]
        "urn:attribute:name:4": true
    PutAttributes:
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/Attributes'
    ProxyUser:
      type: object
      properties:
        login:
          type: string
          description: User's login
          example: '1a2b3c@example.com'
        attributes:
          $ref: '#/components/schemas/Attributes'
    FieldsObject:
      type: object
      properties:
        fields:
          $ref: '#/components/schemas/Fields'
    Fields:
      type: array
      items:
        type: string
        example: "urn:attribute:name"
    FindByIdentifiersRequestBody:
      type: object
      properties:
        IdPIdentifier:
          type: string
          example: "https://example.com/"
        identifiers:
          type: array
          items:
            type: string
          example: ["identifier1", "identifiers2"]
        fields:
          $ref: '#/components/schemas/Fields'
      required:
        - IdPIdentifier
        - identifiers
    FindByPerunUserIdRequestBody:
      type: object
      properties:
        userId:
          type: integer
          example: 123456
        fields:
          $ref: '#/components/schemas/Fields'
      required:
        - userId
  responses:
    400BadRequest:
      description: Bad Request
    401NotAuthorized:
      description: Not authorized
    404NotFound:
      description: Not found
    405NotAllowed:
      description: Method not allowed
    500InternalError:
      description: Internal error
    503TemporaryUnavailable:
      description: Temporary unavailable
  examples:
    rp-identifier1:
      value: 'https://idp.example.com/idp/'
      summary: 'entityId'
    rp-identifier2:
      value: '123-456-879'
      summary: 'clientId'
    proxyuser-login:
      value: '1a2b3c@example.com'
      summary: User's login

paths:
  /auth/proxy-user/{login}:
    get:
      summary: Returns a user by login.
      parameters:
        - name: login
          in: path
          required: true
          description: User's login
          example: '1a2b3c@example.com'
          schema:
            type: string
        - name: fields
          in: query
          required: false
          description: List of user's identifiers
          example: ['urn:attrname:attribute1', 'urn:attrname:attribute2']
          schema:
            type: array
            items:
              type: string
      security:
        - BasicAuth: []
      responses:
        '200' :
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
    post:
      summary: Returns a user by login.
      parameters:
        - name: login
          in: path
          required: true
          description: User's login
          example: '1a2b3c@example.com'
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldsObject'
      security:
        - BasicAuth: []
      responses:
        '200' :
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/{login}/entitlements:
    get:
      summary: Returns an entitlements for the given user.
      parameters:
        - name: login
          in: path
          required: true
          description: User's login
          example: '1a2b3c@example.com'
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200' :
          description: Returns JSON object user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/{login}/identity/{identityId}:
    put:
      summary: Update User-Identity attributes
      parameters:
        - name: login
          in: path
          required: true
          description: User's login
          schema:
            type: string
        - name: identityId
          in: path
          required: true
          description: Identity unique identifier(in base64url saf)
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAttributes'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/findByIdentifiers:
    get:
      summary:  Find proxy user by given sourceIdP EntityId and addition source identifiers
      parameters:
        - name: IdPIdentifier
          in: query
          description: IdP Identifier in base64url safe format
          required: true
          example: 'https://idp.example.com/idp/'
          schema:
            type: string
        - name: identifiers
          in: query
          required: true
          example: ['https://idp.example.com/idp/!https://sp.example.com/idp/!1111', '1111@example.com', 'login1111@example.com']
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: fields
          in: query
          required: false
          description: List of user's identifiers
          example: ['urn:attrname:attribute1', 'urn:attrname:attribute2']
          schema:
            type: array
            items:
              type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
    post:
      summary:  Find proxy user by given sourceIdP EntityId and addition source identifiers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdentifiersRequestBody'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/findByExtLogins:
    get:
      summary: Find proxy user by given sourceIdP EntityId and extLogins
      parameters:
        - name: IdPIdentifier
          in: query
          description: IdP Identifier in base64url safe format
          required: true
          example: 'https://idp.example.com/idp/'
          schema:
            type: string
        - name: identifiers
          in: query
          required: true
          example: ['https://idp.example.com/idp/!https://sp.example.com/idp/!1111', '1111@example.com', 'login1111@example.com']
          schema:
            type: array
            items:
              type: string
            minItems: 1
        - name: fields
          in: query
          required: false
          description: List of user's identifiers
          example: ['urn:attrname:attribute1', 'urn:attrname:attribute2']
          schema:
            type: array
            items:
              type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
    post:
      summary: Find proxy user by given sourceIdP EntityId and extLogins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdentifiersRequestBody'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/findByPerunUserId:
    get:
      summary: Search user by given sourceIdP EntityId and source identifiers
      parameters:
        - name: userId
          in: query
          required: true
          description: User's perun ID
          example: 11
          schema:
            type: integer
        - name: fields
          in: query
          required: false
          description: List of user's identifiers
          example: ['urn:attrname:attribute1', 'urn:attrname:attribute2']
          schema:
            type: array
            items:
              type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
    post:
      summary: Search user by given sourceIdP EntityId and source identifiers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByPerunUserIdRequestBody'
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns JSON object user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/relying-party/{rp-identifier}/proxy-user/{login}/entitlements:
    get:
      summary: Get user entitlements
      parameters:
        - name: rp-identifier
          in: path
          required: true
          description: Relying party identifier in base64url safe format
          examples:
            entityId:
              $ref: '#/components/examples/rp-identifier1'
            clientId:
              $ref: '#/components/examples/rp-identifier2'
          schema:
            type: string
        - name: login
          in: path
          required: true
          description: User's login
          examples:
            login:
              $ref: '#/components/examples/proxyuser-login'
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Returns list of user's entitlements.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/ga4gh:
    get:
      summary: Get GA4GH passport for the given user.
      parameters:
        - name: userId
          in: query
          required: true
          description: User's perun ID
          example: 11
          schema:
            type: integer
      security:
        - BasicAuth: [ ]
      responses:
        '200':
          description: Returns JSON GA4GH passport
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
  /auth/proxy-user/{login}/ga4gh:
    get:
      summary: Get GA4GH passport for the given user.
      parameters:
        - name: login
          in: query
          required: true
          description: User's login
          example: '1a2b3c@example.com'
          schema:
            type: String
      security:
        - BasicAuth: [ ]
      responses:
        '200':
          description: Returns JSON GA4GH passport
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyUser'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401NotAuthorized'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405NotAllowed'
        '500':
          $ref: '#/components/responses/500InternalError'
        '503':
          $ref: '#/components/responses/503TemporaryUnavailable'
